// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package farm_ng.state_estimator.proto;

import "farm_ng/core/timestamp.proto";
import "sophus/linalg.proto";
import "sophus/lie.proto";

service StateEstimatorService {
  rpc robotDynamics(RobotDynamicsRequest)
      returns (stream RobotDynamicsReply) {}

    // TODO: Return control signal (request) to state estimator
    // rpc controlRobotDynamics(stream ControlRobotDynamicsRequest)
    //     returns (stream ControlRobotDynamicsReply) {}

  rpc robotCalibrationReply(RobotCalibrationRequest)
      returns (RobotCalibrationReply) {}

}

// TODO: Return control signal (request) to state estimator
// message ControlRobotDynamicsRequest {
//     // AmigaRpdo1 (commands sent to canbus)
// }
// message ControlRobotDynamicsReply {
//     // Pose from state estimator to controller
// }

message RobotDynamicsRequest {
    string device = 1;
}

message RobotDynamicsReply {
    // Timestamp from farm-ng-core
    // SE3d types from Sophus
    farm_ng.core.proto.Timestamp stamp = 1;  // this contains which clock
    sophus.proto.Se3F64 odom_pose_robot = 2;
    // Rate of the robot in the robot's frame
    RobotRate robot_rate = 3;
}

message RobotRate {
    double speed = 1;
    double angular_rate = 2;
}

message RobotCalibrationRequest {
    string device = 1;
}

message RobotCalibrationReply {

    farm_ng.core.proto.Timestamp stamp = 1;  // this contains which clock
    // poses has
    // robot -> oak0/right
    // robot -> oak1/right
    // robot -> wheel/0xA
    // robot -> wheel/0xB
    // robot -> wheel/0xC
    // robot -> wheel/0xD
    repeated NamedPose3d poses = 2;
    repeated NamedWheel wheels = 3;
}

message NamedWheel {
    // e.g. wheel/0xA
    string name = 1;
    double radius = 2;
}

message NamedPose3d {
    string frame_a = 1;
    string frame_b = 2;
    sophus.proto.Se3F64 a_pose_b = 3;
}
