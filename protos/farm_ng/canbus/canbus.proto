// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package farm_ng.canbus.proto;

// H-bridge command types
enum HBridgeCommandType {
  // Commands
  HBRIDGE_UNKNOWN = 0;
  HBRIDGE_FORWARD = 1;
  HBRIDGE_REVERSE = 2;
  HBRIDGE_STOPPED = 3;
  HBRIDGE_SETPOINT = 4; // Desired set point along the tool's range of motion
}

// PTO command types - decided not to use clockwise and counter-clockwise as it depends on the view of the PTO
enum PtoCommandType {
  // Commands
  PTO_UNKNOWN = 0;
  PTO_FORWARD = 1;
  PTO_REVERSE = 2;
  PTO_STOPPED = 3;
}

enum ToolStatusType {
  // Commands
  TOOL_UNKNOWN = 0;
  TOOL_FORWARD = 1;
  TOOL_REVERSE = 2;
  TOOL_STOPPED = 3;
}

// Message to send a twist command to the vehicle
message Twist2d {
  // The commanded linear velocity of the vehicle in the x direction in meters per second
  float linear_velocity_x = 1;
  float linear_velocity_y = 2;

  // The commanded angular velocity of the vehicle in radians per second
  float angular_velocity = 3;
}

message RawCanbusMessage {
  // The time the message is "received" / "sent" on the canbus
  // in the steady_clock/time.montonic() time domain
  double stamp = 1;
  uint32 id = 2; // CAN node ID of the message
  bool error = 3;
  bool remote_transmission = 4;
  bytes data = 5; // Encoded payload of the CAN packet
}

message RawCanbusMessages {
  repeated RawCanbusMessage messages = 1;
}

// Enum of motor controller states
enum MotorControllerStatus {
  // TODO: Do we want to replace uint32 status=3; in MotorState with this enum?
  // Would be breaking for any clients that are already using the proto
  PRE_OPERATIONAL = 0;
  IDLE = 1;
  POST_OPERATIONAL = 2;
  RUN = 3;
  FAULT = 4;
}

// Proto definition containing state values of a motor
// Corresponds to MotorState class
message MotorState {
    double stamp = 1; // stamp of the RawCanbusMessage containing the motor state values
    uint32 id = 2; // CAN node ID of the motor
    uint32 status = 3; // Corresponds to MotorControllerStatus enum
    int32 rpm = 4; // Non-geared motor rpm. Values are inverted (negative) for flipped motors.
    double voltage = 5; // Battery voltage, as measured at motor controller
    double current = 6; // Motor current draw, as measured at motor controller
    int32 temperature = 7; // Motor temperature
}

message MotorStates {
  // List of motorstates
  repeated MotorState motors = 1;
}

// Proto definition containing messages for tool control
// H-bridge
message HBridgeCommand{
  uint32 id = 1; // CAN node ID of the message
  HBridgeCommandType command = 2; // either FORWARD, REVERSE, STOPPED, or SETPOINT
  double setpoint = 3; // optional
  bool latched = 4; // if H-bridge is latched or not
}

// Pack multiple HBridgeCommands into one message
message HBridgeCommands{
  repeated HBridgeCommand commands = 1;
}

// PTO
message PtoCommand{
  uint32 id = 1; // CAN node ID of the message
  PtoCommandType command = 2; // either CLOCKWISE, COUNTER_CLOCKWISE, or STOPPED
  int32 rpm = 3; // angular velocity in RPM
  double gear_ratio = 4; // gear ratio of the PTO
}


// Pack all tool commands into one message --> this message contains commands for all four H-bridges and all four PTOs
message ActuatorCommand{
  repeated HBridgeCommand hbridges = 1;
  repeated PtoCommand ptos = 2;
}

// Message to receive tool status
message ToolStatus{
  uint32 id = 1; // CAN node ID of the message
  ToolStatusType status = 2; // either FORWARD, REVERSE, STOPPED, CLOCKWISE, or COUNTER_CLOCKWISE - basically any type of tool status
  double state = 3; // either percentage of maximum displacement or RPM
  bool latched = 4; // if tool is latched or not (only applicable to H-bridge)
}

message ToolStatuses{
  repeated ToolStatus statuses = 1;
}
