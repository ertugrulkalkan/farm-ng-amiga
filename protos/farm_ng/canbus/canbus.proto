// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



syntax = "proto3";

package farm_ng.canbus.proto;

service CanbusService {
  rpc readCanbusMessages(ReadCanbusMessagesRequest)
      returns (stream ReadCanbusMessagesReply) {}
  rpc sendCanbusMessages(stream SendCanbusMessagesRequest)
      returns (SendCanbusMessagesReply) {}
  rpc getServiceState(GetServiceStateRequest) returns (GetServiceStateResult) {}
}

enum ReplyStatus {
  OK = 0;
  FAILED = 1;
}

enum CanbusServiceState {
  UNKNOWN = 0;
  STOPPED = 1;
  RUNNING = 2;
  IDLE = 3;
  UNAVAILABLE = 4;
  ERROR = 5;
}

enum CanbusIfaceState {
  UNKNOWN = 0;
  BUS_OFF = 1;
  ERROR_PASSIVE = 2;
  ERROR_ACTIVE = 3;
  IFACE_NOT_FOUND = 4;
}

message ReadCanbusMessagesRequest {
  string message = 1;
}

message ReadCanbusMessagesReply {
  ReplyStatus status = 1;
  // Messages may be batched by server to reduce gRPC latency
  RawCanbusMessages messages = 2;
}

message SendCanbusMessagesRequest {
  // Client may batch messages if necessary to reduce gRPC latency
  RawCanbusMessages messages = 1;
}

message SendCanbusMessagesReply {
  ReplyStatus status = 1;
}

message RawCanbusMessage {
  // The time the message is "sent" on the canbus
  // in the steady_clock/time.montonic() time domain
  double stamp = 1;
  uint32 id = 2;
  bool error = 3;
  bool remote_transmission = 4;
  bytes data = 5;
}

message RawCanbusMessages {
  repeated RawCanbusMessage messages = 1;
}

message GetServiceStateRequest {
  string message = 1;
}

message GetServiceStateResult {
  string state_name = 1;
  CanbusServiceState state = 2;
  ReplyStatus status = 3;
  string can_iface = 4;
  int32 bit_rate = 5;
  CanbusIfaceState iface_state = 6;
  int32 tec = 7;
  int32 rec = 8;
  float bus_load = 9;
}
